// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class Daydreaming extends ethereum.Event {
  get params(): Daydreaming__Params {
    return new Daydreaming__Params(this);
  }
}

export class Daydreaming__Params {
  _event: Daydreaming;

  constructor(event: Daydreaming) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Terraformed extends ethereum.Event {
  get params(): Terraformed__Params {
    return new Terraformed__Params(this);
  }
}

export class Terraformed__Params {
  _event: Terraformed;

  constructor(event: Terraformed) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get terraformer(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TokensRevealed extends ethereum.Event {
  get params(): TokensRevealed__Params {
    return new TokensRevealed__Params(this);
  }
}

export class TokensRevealed__Params {
  _event: TokensRevealed;

  constructor(event: TokensRevealed) {
    this._event = event;
  }

  get timestamp(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get seed(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Terraforms__structureDataResultStructureStruct extends ethereum.Tuple {
  get levelNumber(): BigInt {
    return this[0].toBigInt();
  }

  get tokensOnLevel(): BigInt {
    return this[1].toBigInt();
  }

  get structureSpaceX(): BigInt {
    return this[2].toBigInt();
  }

  get structureSpaceY(): BigInt {
    return this[3].toBigInt();
  }

  get structureSpaceZ(): BigInt {
    return this[4].toBigInt();
  }
}

export class Terraforms__tokenSupplementalDataResultResultStruct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get level(): BigInt {
    return this[1].toBigInt();
  }

  get xCoordinate(): BigInt {
    return this[2].toBigInt();
  }

  get yCoordinate(): BigInt {
    return this[3].toBigInt();
  }

  get elevation(): BigInt {
    return this[4].toBigInt();
  }

  get structureSpaceX(): BigInt {
    return this[5].toBigInt();
  }

  get structureSpaceY(): BigInt {
    return this[6].toBigInt();
  }

  get structureSpaceZ(): BigInt {
    return this[7].toBigInt();
  }

  get zoneName(): string {
    return this[8].toString();
  }

  get zoneColors(): Array<string> {
    return this[9].toStringArray();
  }

  get characterSet(): Array<string> {
    return this[10].toStringArray();
  }
}

export class Terraforms extends ethereum.SmartContract {
  static bind(address: Address): Terraforms {
    return new Terraforms("Terraforms", address);
  }

  MAX_SUPPLY(): BigInt {
    let result = super.call("MAX_SUPPLY", "MAX_SUPPLY():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MAX_SUPPLY(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("MAX_SUPPLY", "MAX_SUPPLY():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  OWNER_ALLOTMENT(): BigInt {
    let result = super.call(
      "OWNER_ALLOTMENT",
      "OWNER_ALLOTMENT():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_OWNER_ALLOTMENT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "OWNER_ALLOTMENT",
      "OWNER_ALLOTMENT():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  PRICE(): BigInt {
    let result = super.call("PRICE", "PRICE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_PRICE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("PRICE", "PRICE():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  REVEAL_TIMESTAMP(): BigInt {
    let result = super.call(
      "REVEAL_TIMESTAMP",
      "REVEAL_TIMESTAMP():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_REVEAL_TIMESTAMP(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "REVEAL_TIMESTAMP",
      "REVEAL_TIMESTAMP():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  SUPPLY(): BigInt {
    let result = super.call("SUPPLY", "SUPPLY():(uint256)", []);

    return result[0].toBigInt();
  }

  try_SUPPLY(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("SUPPLY", "SUPPLY():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  TOKEN_SCALE(): BigInt {
    let result = super.call("TOKEN_SCALE", "TOKEN_SCALE():(int256)", []);

    return result[0].toBigInt();
  }

  try_TOKEN_SCALE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("TOKEN_SCALE", "TOKEN_SCALE():(int256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  dreamers(): BigInt {
    let result = super.call("dreamers", "dreamers():(uint256)", []);

    return result[0].toBigInt();
  }

  try_dreamers(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("dreamers", "dreamers():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  earlyMintActive(): boolean {
    let result = super.call("earlyMintActive", "earlyMintActive():(bool)", []);

    return result[0].toBoolean();
  }

  try_earlyMintActive(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "earlyMintActive",
      "earlyMintActive():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  mintingPaused(): boolean {
    let result = super.call("mintingPaused", "mintingPaused():(bool)", []);

    return result[0].toBoolean();
  }

  try_mintingPaused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("mintingPaused", "mintingPaused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  seed(): BigInt {
    let result = super.call("seed", "seed():(uint256)", []);

    return result[0].toBigInt();
  }

  try_seed(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("seed", "seed():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  structureData(
    timestamp: BigInt
  ): Array<Terraforms__structureDataResultStructureStruct> {
    let result = super.call(
      "structureData",
      "structureData(uint256):((uint256,uint256,int256,int256,int256)[20])",
      [ethereum.Value.fromUnsignedBigInt(timestamp)]
    );

    return result[0].toTupleArray<
      Terraforms__structureDataResultStructureStruct
    >();
  }

  try_structureData(
    timestamp: BigInt
  ): ethereum.CallResult<
    Array<Terraforms__structureDataResultStructureStruct>
  > {
    let result = super.tryCall(
      "structureData",
      "structureData(uint256):((uint256,uint256,int256,int256,int256)[20])",
      [ethereum.Value.fromUnsignedBigInt(timestamp)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<Terraforms__structureDataResultStructureStruct>()
    );
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  terraformsAugmentationsAddress(): Address {
    let result = super.call(
      "terraformsAugmentationsAddress",
      "terraformsAugmentationsAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_terraformsAugmentationsAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "terraformsAugmentationsAddress",
      "terraformsAugmentationsAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenByIndex(index: BigInt): BigInt {
    let result = super.call("tokenByIndex", "tokenByIndex(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(index)
    ]);

    return result[0].toBigInt();
  }

  try_tokenByIndex(index: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenByIndex",
      "tokenByIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenCounter(): BigInt {
    let result = super.call("tokenCounter", "tokenCounter():(uint256)", []);

    return result[0].toBigInt();
  }

  try_tokenCounter(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("tokenCounter", "tokenCounter():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenHTML(tokenId: BigInt): string {
    let result = super.call("tokenHTML", "tokenHTML(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenHTML(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenHTML", "tokenHTML(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenOfOwnerByIndex(owner: Address, index: BigInt): BigInt {
    let result = super.call(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toBigInt();
  }

  try_tokenOfOwnerByIndex(
    owner: Address,
    index: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenSVG(tokenId: BigInt): string {
    let result = super.call("tokenSVG", "tokenSVG(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenSVG(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenSVG", "tokenSVG(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenSupplementalData(
    tokenId: BigInt
  ): Terraforms__tokenSupplementalDataResultResultStruct {
    let result = super.call(
      "tokenSupplementalData",
      "tokenSupplementalData(uint256):((uint256,uint256,uint256,uint256,int256,int256,int256,int256,string,string[10],string[9]))",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return changetype<Terraforms__tokenSupplementalDataResultResultStruct>(
      result[0].toTuple()
    );
  }

  try_tokenSupplementalData(
    tokenId: BigInt
  ): ethereum.CallResult<Terraforms__tokenSupplementalDataResultResultStruct> {
    let result = super.tryCall(
      "tokenSupplementalData",
      "tokenSupplementalData(uint256):((uint256,uint256,uint256,uint256,int256,int256,int256,int256,string,string[10],string[9]))",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Terraforms__tokenSupplementalDataResultResultStruct>(
        value[0].toTuple()
      )
    );
  }

  tokenToAuthorizedDreamer(param0: BigInt): Address {
    let result = super.call(
      "tokenToAuthorizedDreamer",
      "tokenToAuthorizedDreamer(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_tokenToAuthorizedDreamer(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "tokenToAuthorizedDreamer",
      "tokenToAuthorizedDreamer(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenToCanvasData(param0: BigInt, param1: BigInt): BigInt {
    let result = super.call(
      "tokenToCanvasData",
      "tokenToCanvasData(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_tokenToCanvasData(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenToCanvasData",
      "tokenToCanvasData(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenToDreamBlock(param0: BigInt): BigInt {
    let result = super.call(
      "tokenToDreamBlock",
      "tokenToDreamBlock(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_tokenToDreamBlock(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenToDreamBlock",
      "tokenToDreamBlock(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenToDreamer(param0: BigInt): Address {
    let result = super.call(
      "tokenToDreamer",
      "tokenToDreamer(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_tokenToDreamer(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "tokenToDreamer",
      "tokenToDreamer(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenToPlacement(param0: BigInt): BigInt {
    let result = super.call(
      "tokenToPlacement",
      "tokenToPlacement(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_tokenToPlacement(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenToPlacement",
      "tokenToPlacement(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenToStatus(param0: BigInt): i32 {
    let result = super.call("tokenToStatus", "tokenToStatus(uint256):(uint8)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toI32();
  }

  try_tokenToStatus(param0: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "tokenToStatus",
      "tokenToStatus(uint256):(uint8)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenURIAddresses(param0: BigInt): Address {
    let result = super.call(
      "tokenURIAddresses",
      "tokenURIAddresses(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_tokenURIAddresses(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "tokenURIAddresses",
      "tokenURIAddresses(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _terraformsDataAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _terraformsAugmentationsAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class AddTokenURIAddressCall extends ethereum.Call {
  get inputs(): AddTokenURIAddressCall__Inputs {
    return new AddTokenURIAddressCall__Inputs(this);
  }

  get outputs(): AddTokenURIAddressCall__Outputs {
    return new AddTokenURIAddressCall__Outputs(this);
  }
}

export class AddTokenURIAddressCall__Inputs {
  _call: AddTokenURIAddressCall;

  constructor(call: AddTokenURIAddressCall) {
    this._call = call;
  }

  get newAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddTokenURIAddressCall__Outputs {
  _call: AddTokenURIAddressCall;

  constructor(call: AddTokenURIAddressCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class AuthorizeDreamerCall extends ethereum.Call {
  get inputs(): AuthorizeDreamerCall__Inputs {
    return new AuthorizeDreamerCall__Inputs(this);
  }

  get outputs(): AuthorizeDreamerCall__Outputs {
    return new AuthorizeDreamerCall__Outputs(this);
  }
}

export class AuthorizeDreamerCall__Inputs {
  _call: AuthorizeDreamerCall;

  constructor(call: AuthorizeDreamerCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get authorizedDreamer(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class AuthorizeDreamerCall__Outputs {
  _call: AuthorizeDreamerCall;

  constructor(call: AuthorizeDreamerCall) {
    this._call = call;
  }
}

export class CommitDreamToCanvasCall extends ethereum.Call {
  get inputs(): CommitDreamToCanvasCall__Inputs {
    return new CommitDreamToCanvasCall__Inputs(this);
  }

  get outputs(): CommitDreamToCanvasCall__Outputs {
    return new CommitDreamToCanvasCall__Outputs(this);
  }
}

export class CommitDreamToCanvasCall__Inputs {
  _call: CommitDreamToCanvasCall;

  constructor(call: CommitDreamToCanvasCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get dream(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class CommitDreamToCanvasCall__Outputs {
  _call: CommitDreamToCanvasCall;

  constructor(call: CommitDreamToCanvasCall) {
    this._call = call;
  }
}

export class EarlyMintCall extends ethereum.Call {
  get inputs(): EarlyMintCall__Inputs {
    return new EarlyMintCall__Inputs(this);
  }

  get outputs(): EarlyMintCall__Outputs {
    return new EarlyMintCall__Outputs(this);
  }
}

export class EarlyMintCall__Inputs {
  _call: EarlyMintCall;

  constructor(call: EarlyMintCall) {
    this._call = call;
  }

  get numTokens(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class EarlyMintCall__Outputs {
  _call: EarlyMintCall;

  constructor(call: EarlyMintCall) {
    this._call = call;
  }
}

export class EnterDreamCall extends ethereum.Call {
  get inputs(): EnterDreamCall__Inputs {
    return new EnterDreamCall__Inputs(this);
  }

  get outputs(): EnterDreamCall__Outputs {
    return new EnterDreamCall__Outputs(this);
  }
}

export class EnterDreamCall__Inputs {
  _call: EnterDreamCall;

  constructor(call: EnterDreamCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class EnterDreamCall__Outputs {
  _call: EnterDreamCall;

  constructor(call: EnterDreamCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get numTokens(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class OwnerClaimCall extends ethereum.Call {
  get inputs(): OwnerClaimCall__Inputs {
    return new OwnerClaimCall__Inputs(this);
  }

  get outputs(): OwnerClaimCall__Outputs {
    return new OwnerClaimCall__Outputs(this);
  }
}

export class OwnerClaimCall__Inputs {
  _call: OwnerClaimCall;

  constructor(call: OwnerClaimCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get numTokens(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class OwnerClaimCall__Outputs {
  _call: OwnerClaimCall;

  constructor(call: OwnerClaimCall) {
    this._call = call;
  }
}

export class RedeemMintpassCall extends ethereum.Call {
  get inputs(): RedeemMintpassCall__Inputs {
    return new RedeemMintpassCall__Inputs(this);
  }

  get outputs(): RedeemMintpassCall__Outputs {
    return new RedeemMintpassCall__Outputs(this);
  }
}

export class RedeemMintpassCall__Inputs {
  _call: RedeemMintpassCall;

  constructor(call: RedeemMintpassCall) {
    this._call = call;
  }
}

export class RedeemMintpassCall__Outputs {
  _call: RedeemMintpassCall;

  constructor(call: RedeemMintpassCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetMintpassHoldersCall extends ethereum.Call {
  get inputs(): SetMintpassHoldersCall__Inputs {
    return new SetMintpassHoldersCall__Inputs(this);
  }

  get outputs(): SetMintpassHoldersCall__Outputs {
    return new SetMintpassHoldersCall__Outputs(this);
  }
}

export class SetMintpassHoldersCall__Inputs {
  _call: SetMintpassHoldersCall;

  constructor(call: SetMintpassHoldersCall) {
    this._call = call;
  }

  get mintpassHolders(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class SetMintpassHoldersCall__Outputs {
  _call: SetMintpassHoldersCall;

  constructor(call: SetMintpassHoldersCall) {
    this._call = call;
  }
}

export class SetSeedCall extends ethereum.Call {
  get inputs(): SetSeedCall__Inputs {
    return new SetSeedCall__Inputs(this);
  }

  get outputs(): SetSeedCall__Outputs {
    return new SetSeedCall__Outputs(this);
  }
}

export class SetSeedCall__Inputs {
  _call: SetSeedCall;

  constructor(call: SetSeedCall) {
    this._call = call;
  }
}

export class SetSeedCall__Outputs {
  _call: SetSeedCall;

  constructor(call: SetSeedCall) {
    this._call = call;
  }
}

export class SetTokenURIAddressCall extends ethereum.Call {
  get inputs(): SetTokenURIAddressCall__Inputs {
    return new SetTokenURIAddressCall__Inputs(this);
  }

  get outputs(): SetTokenURIAddressCall__Outputs {
    return new SetTokenURIAddressCall__Outputs(this);
  }
}

export class SetTokenURIAddressCall__Inputs {
  _call: SetTokenURIAddressCall;

  constructor(call: SetTokenURIAddressCall) {
    this._call = call;
  }

  get tokens(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get index(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetTokenURIAddressCall__Outputs {
  _call: SetTokenURIAddressCall;

  constructor(call: SetTokenURIAddressCall) {
    this._call = call;
  }
}

export class ToggleEarlyCall extends ethereum.Call {
  get inputs(): ToggleEarlyCall__Inputs {
    return new ToggleEarlyCall__Inputs(this);
  }

  get outputs(): ToggleEarlyCall__Outputs {
    return new ToggleEarlyCall__Outputs(this);
  }
}

export class ToggleEarlyCall__Inputs {
  _call: ToggleEarlyCall;

  constructor(call: ToggleEarlyCall) {
    this._call = call;
  }
}

export class ToggleEarlyCall__Outputs {
  _call: ToggleEarlyCall;

  constructor(call: ToggleEarlyCall) {
    this._call = call;
  }
}

export class TogglePauseCall extends ethereum.Call {
  get inputs(): TogglePauseCall__Inputs {
    return new TogglePauseCall__Inputs(this);
  }

  get outputs(): TogglePauseCall__Outputs {
    return new TogglePauseCall__Outputs(this);
  }
}

export class TogglePauseCall__Inputs {
  _call: TogglePauseCall;

  constructor(call: TogglePauseCall) {
    this._call = call;
  }
}

export class TogglePauseCall__Outputs {
  _call: TogglePauseCall;

  constructor(call: TogglePauseCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
