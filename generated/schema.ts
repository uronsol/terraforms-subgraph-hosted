// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Daydreaming extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("tokenId", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Daydreaming entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Daydreaming entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Daydreaming", id.toString(), this);
    }
  }

  static load(id: string): Daydreaming | null {
    return changetype<Daydreaming | null>(store.get("Daydreaming", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }
}

export class Terraformed extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("tokenId", Value.fromBigInt(BigInt.zero()));
    this.set("terraformer", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Terraformed entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Terraformed entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Terraformed", id.toString(), this);
    }
  }

  static load(id: string): Terraformed | null {
    return changetype<Terraformed | null>(store.get("Terraformed", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get terraformer(): Bytes {
    let value = this.get("terraformer");
    return value!.toBytes();
  }

  set terraformer(value: Bytes) {
    this.set("terraformer", Value.fromBytes(value));
  }
}

export class TokensRevealed extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("seed", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TokensRevealed entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save TokensRevealed entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("TokensRevealed", id.toString(), this);
    }
  }

  static load(id: string): TokensRevealed | null {
    return changetype<TokensRevealed | null>(store.get("TokensRevealed", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get seed(): BigInt {
    let value = this.get("seed");
    return value!.toBigInt();
  }

  set seed(value: BigInt) {
    this.set("seed", Value.fromBigInt(value));
  }
}

export class SupplementalData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("tokenID", Value.fromString(""));
    this.set("level", Value.fromBigInt(BigInt.zero()));
    this.set("xCoordinate", Value.fromBigInt(BigInt.zero()));
    this.set("yCoordinate", Value.fromBigInt(BigInt.zero()));
    this.set("elevation", Value.fromBigInt(BigInt.zero()));
    this.set("structureSpaceX", Value.fromBigInt(BigInt.zero()));
    this.set("structureSpaceY", Value.fromBigInt(BigInt.zero()));
    this.set("structureSpaceZ", Value.fromBigInt(BigInt.zero()));
    this.set("zoneName", Value.fromString(""));
    this.set("zoneColors", Value.fromStringArray(new Array(0)));
    this.set("characterSet", Value.fromStringArray(new Array(0)));
    this.set("seed", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SupplementalData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save SupplementalData entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("SupplementalData", id.toString(), this);
    }
  }

  static load(id: string): SupplementalData | null {
    return changetype<SupplementalData | null>(
      store.get("SupplementalData", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenID(): string {
    let value = this.get("tokenID");
    return value!.toString();
  }

  set tokenID(value: string) {
    this.set("tokenID", Value.fromString(value));
  }

  get level(): BigInt {
    let value = this.get("level");
    return value!.toBigInt();
  }

  set level(value: BigInt) {
    this.set("level", Value.fromBigInt(value));
  }

  get xCoordinate(): BigInt {
    let value = this.get("xCoordinate");
    return value!.toBigInt();
  }

  set xCoordinate(value: BigInt) {
    this.set("xCoordinate", Value.fromBigInt(value));
  }

  get yCoordinate(): BigInt {
    let value = this.get("yCoordinate");
    return value!.toBigInt();
  }

  set yCoordinate(value: BigInt) {
    this.set("yCoordinate", Value.fromBigInt(value));
  }

  get elevation(): BigInt {
    let value = this.get("elevation");
    return value!.toBigInt();
  }

  set elevation(value: BigInt) {
    this.set("elevation", Value.fromBigInt(value));
  }

  get structureSpaceX(): BigInt {
    let value = this.get("structureSpaceX");
    return value!.toBigInt();
  }

  set structureSpaceX(value: BigInt) {
    this.set("structureSpaceX", Value.fromBigInt(value));
  }

  get structureSpaceY(): BigInt {
    let value = this.get("structureSpaceY");
    return value!.toBigInt();
  }

  set structureSpaceY(value: BigInt) {
    this.set("structureSpaceY", Value.fromBigInt(value));
  }

  get structureSpaceZ(): BigInt {
    let value = this.get("structureSpaceZ");
    return value!.toBigInt();
  }

  set structureSpaceZ(value: BigInt) {
    this.set("structureSpaceZ", Value.fromBigInt(value));
  }

  get zoneName(): string {
    let value = this.get("zoneName");
    return value!.toString();
  }

  set zoneName(value: string) {
    this.set("zoneName", Value.fromString(value));
  }

  get zoneColors(): Array<string> {
    let value = this.get("zoneColors");
    return value!.toStringArray();
  }

  set zoneColors(value: Array<string>) {
    this.set("zoneColors", Value.fromStringArray(value));
  }

  get characterSet(): Array<string> {
    let value = this.get("characterSet");
    return value!.toStringArray();
  }

  set characterSet(value: Array<string>) {
    this.set("characterSet", Value.fromStringArray(value));
  }

  get seed(): BigInt {
    let value = this.get("seed");
    return value!.toBigInt();
  }

  set seed(value: BigInt) {
    this.set("seed", Value.fromBigInt(value));
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("tokenID", Value.fromBigInt(BigInt.zero()));
    this.set("tokenURI", Value.fromString(""));
    this.set("terraformer", Value.fromString(""));
    this.set("createdAt", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Token entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Token entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Token", id.toString(), this);
    }
  }

  static load(id: string): Token | null {
    return changetype<Token | null>(store.get("Token", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenID(): BigInt {
    let value = this.get("tokenID");
    return value!.toBigInt();
  }

  set tokenID(value: BigInt) {
    this.set("tokenID", Value.fromBigInt(value));
  }

  get tokenURI(): string {
    let value = this.get("tokenURI");
    return value!.toString();
  }

  set tokenURI(value: string) {
    this.set("tokenURI", Value.fromString(value));
  }

  get terraformer(): string {
    let value = this.get("terraformer");
    return value!.toString();
  }

  set terraformer(value: string) {
    this.set("terraformer", Value.fromString(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get supplementalData(): string | null {
    let value = this.get("supplementalData");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set supplementalData(value: string | null) {
    if (!value) {
      this.unset("supplementalData");
    } else {
      this.set("supplementalData", Value.fromString(<string>value));
    }
  }
}

export class Terraformer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Terraformer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Terraformer entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Terraformer", id.toString(), this);
    }
  }

  static load(id: string): Terraformer | null {
    return changetype<Terraformer | null>(store.get("Terraformer", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokens(): Array<string> {
    let value = this.get("tokens");
    return value!.toStringArray();
  }

  set tokens(value: Array<string>) {
    this.set("tokens", Value.fromStringArray(value));
  }
}
